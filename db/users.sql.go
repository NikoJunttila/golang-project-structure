// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: users.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id,
  email,
  password_hash,
  name,
  avatar_url,
  provider,
  provider_id,
  email_verified,
  created_at,
  updated_at
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING id, email, password_hash, name, avatar_url, provider, provider_id, email_verified, disabled, created_at, updated_at
`

type CreateUserParams struct {
	ID            string
	Email         string
	PasswordHash  string
	Name          string
	AvatarUrl     string
	Provider      string
	ProviderID    string
	EmailVerified bool
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.Name,
		arg.AvatarUrl,
		arg.Provider,
		arg.ProviderID,
		arg.EmailVerified,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.AvatarUrl,
		&i.Provider,
		&i.ProviderID,
		&i.EmailVerified,
		&i.Disabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, name, avatar_url, provider, provider_id, email_verified, disabled, created_at, updated_at FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.AvatarUrl,
		&i.Provider,
		&i.ProviderID,
		&i.EmailVerified,
		&i.Disabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password_hash, name, avatar_url, provider, provider_id, email_verified, disabled, created_at, updated_at FROM users
WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.AvatarUrl,
		&i.Provider,
		&i.ProviderID,
		&i.EmailVerified,
		&i.Disabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByProviderID = `-- name: GetUserByProviderID :one
SELECT id, email, password_hash, name, avatar_url, provider, provider_id, email_verified, disabled, created_at, updated_at FROM users
WHERE provider = ? AND provider_id = ?
`

type GetUserByProviderIDParams struct {
	Provider   string
	ProviderID string
}

func (q *Queries) GetUserByProviderID(ctx context.Context, arg GetUserByProviderIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByProviderID, arg.Provider, arg.ProviderID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.AvatarUrl,
		&i.Provider,
		&i.ProviderID,
		&i.EmailVerified,
		&i.Disabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  email = ?,
  password_hash = ?,
  name = ?,
  avatar_url = ?,
  provider = ?,
  provider_id = ?,
  email_verified = ?,
  created_at = ?,
  updated_at = ?
WHERE id = ?
RETURNING id, email, password_hash, name, avatar_url, provider, provider_id, email_verified, disabled, created_at, updated_at
`

type UpdateUserParams struct {
	Email         string
	PasswordHash  string
	Name          string
	AvatarUrl     string
	Provider      string
	ProviderID    string
	EmailVerified bool
	CreatedAt     time.Time
	UpdatedAt     time.Time
	ID            string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Email,
		arg.PasswordHash,
		arg.Name,
		arg.AvatarUrl,
		arg.Provider,
		arg.ProviderID,
		arg.EmailVerified,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.AvatarUrl,
		&i.Provider,
		&i.ProviderID,
		&i.EmailVerified,
		&i.Disabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
