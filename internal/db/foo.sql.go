// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: foo.sql

package db

import (
	"context"
)

const getFoo = `-- name: GetFoo :one
SELECT id, message, created_at, updated_at, deleted_at FROM foos
WHERE id = ? LIMIT 1
`

func (q *Queries) GetFoo(ctx context.Context, id int64) (Foo, error) {
	row := q.db.QueryRowContext(ctx, getFoo, id)
	var i Foo
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertFoo = `-- name: InsertFoo :many
INSERT INTO foos (
    message
) VALUES (?) RETURNING id, message, created_at, updated_at, deleted_at
`

func (q *Queries) InsertFoo(ctx context.Context, message string) ([]Foo, error) {
	rows, err := q.db.QueryContext(ctx, insertFoo, message)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Foo
	for rows.Next() {
		var i Foo
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFoos = `-- name: ListFoos :many
SELECT id, message, created_at, updated_at, deleted_at FROM foos
ORDER BY message
`

func (q *Queries) ListFoos(ctx context.Context) ([]Foo, error) {
	rows, err := q.db.QueryContext(ctx, listFoos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Foo
	for rows.Next() {
		var i Foo
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFoo = `-- name: UpdateFoo :one
UPDATE foos 
SET message = ?, updated_at = CURRENT_TIMESTAMP 
WHERE id = ? 
RETURNING id, message, created_at, updated_at, deleted_at
`

type UpdateFooParams struct {
	Message string
	ID      int64
}

func (q *Queries) UpdateFoo(ctx context.Context, arg UpdateFooParams) (Foo, error) {
	row := q.db.QueryRowContext(ctx, updateFoo, arg.Message, arg.ID)
	var i Foo
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
