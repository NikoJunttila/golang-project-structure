// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: admin_logs.sql

package db

import (
	"context"
	"database/sql"
)

const countAuditLogsByAction = `-- name: CountAuditLogsByAction :one
SELECT COUNT(*) FROM admin_audit_logs 
WHERE action = ?
`

func (q *Queries) CountAuditLogsByAction(ctx context.Context, action string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAuditLogsByAction, action)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAuditLogsByAdmin = `-- name: CountAuditLogsByAdmin :one
SELECT COUNT(*) FROM admin_audit_logs 
WHERE admin_user_id = ?
`

func (q *Queries) CountAuditLogsByAdmin(ctx context.Context, adminUserID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAuditLogsByAdmin, adminUserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAuditLogsByDateRange = `-- name: CountAuditLogsByDateRange :one
SELECT COUNT(*) FROM admin_audit_logs 
WHERE timestamp BETWEEN ? AND ?
`

type CountAuditLogsByDateRangeParams struct {
	FromTimestamp interface{}
	ToTimestamp   interface{}
}

func (q *Queries) CountAuditLogsByDateRange(ctx context.Context, arg CountAuditLogsByDateRangeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAuditLogsByDateRange, arg.FromTimestamp, arg.ToTimestamp)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAuditLog = `-- name: CreateAuditLog :one
INSERT INTO admin_audit_logs (
    admin_user_id,
    admin_email,
    target_user_id,
    action,
    resource,
    method,
    path,
    query_params,
    request_body,
    ip_address,
    user_agent,
    status_code,
    response_time_ms,
    timestamp,
    request_id
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id
`

type CreateAuditLogParams struct {
	AdminUserID    string
	AdminEmail     string
	TargetUserID   string
	Action         string
	Resource       string
	Method         string
	Path           string
	QueryParams    string
	RequestBody    string
	IpAddress      string
	UserAgent      string
	StatusCode     int64
	ResponseTimeMs int64
	Timestamp      interface{}
	RequestID      string
}

func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) (AdminAuditLog, error) {
	row := q.db.QueryRowContext(ctx, createAuditLog,
		arg.AdminUserID,
		arg.AdminEmail,
		arg.TargetUserID,
		arg.Action,
		arg.Resource,
		arg.Method,
		arg.Path,
		arg.QueryParams,
		arg.RequestBody,
		arg.IpAddress,
		arg.UserAgent,
		arg.StatusCode,
		arg.ResponseTimeMs,
		arg.Timestamp,
		arg.RequestID,
	)
	var i AdminAuditLog
	err := row.Scan(
		&i.ID,
		&i.AdminUserID,
		&i.AdminEmail,
		&i.TargetUserID,
		&i.Action,
		&i.Resource,
		&i.Method,
		&i.Path,
		&i.QueryParams,
		&i.RequestBody,
		&i.IpAddress,
		&i.UserAgent,
		&i.StatusCode,
		&i.ResponseTimeMs,
		&i.Timestamp,
		&i.RequestID,
	)
	return i, err
}

const deleteOldAuditLogs = `-- name: DeleteOldAuditLogs :exec
DELETE FROM admin_audit_logs 
WHERE timestamp < ?
`

func (q *Queries) DeleteOldAuditLogs(ctx context.Context, timestamp interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteOldAuditLogs, timestamp)
	return err
}

const getAuditLogByID = `-- name: GetAuditLogByID :one
SELECT id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id FROM admin_audit_logs 
WHERE id = ?
`

func (q *Queries) GetAuditLogByID(ctx context.Context, id int64) (AdminAuditLog, error) {
	row := q.db.QueryRowContext(ctx, getAuditLogByID, id)
	var i AdminAuditLog
	err := row.Scan(
		&i.ID,
		&i.AdminUserID,
		&i.AdminEmail,
		&i.TargetUserID,
		&i.Action,
		&i.Resource,
		&i.Method,
		&i.Path,
		&i.QueryParams,
		&i.RequestBody,
		&i.IpAddress,
		&i.UserAgent,
		&i.StatusCode,
		&i.ResponseTimeMs,
		&i.Timestamp,
		&i.RequestID,
	)
	return i, err
}

const getAuditLogStatsByAction = `-- name: GetAuditLogStatsByAction :many
SELECT 
    action,
    COUNT(*) as total_count,
    COUNT(DISTINCT admin_user_id) as unique_admins,
    COUNT(DISTINCT target_user_id) as unique_targets,
    AVG(response_time_ms) as avg_response_time
FROM admin_audit_logs 
GROUP BY action
ORDER BY total_count DESC
`

type GetAuditLogStatsByActionRow struct {
	Action          string
	TotalCount      int64
	UniqueAdmins    int64
	UniqueTargets   int64
	AvgResponseTime sql.NullFloat64
}

func (q *Queries) GetAuditLogStatsByAction(ctx context.Context) ([]GetAuditLogStatsByActionRow, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogStatsByAction)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAuditLogStatsByActionRow
	for rows.Next() {
		var i GetAuditLogStatsByActionRow
		if err := rows.Scan(
			&i.Action,
			&i.TotalCount,
			&i.UniqueAdmins,
			&i.UniqueTargets,
			&i.AvgResponseTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogStatsByAdmin = `-- name: GetAuditLogStatsByAdmin :many
SELECT 
    admin_user_id,
    admin_email,
    COUNT(*) as total_actions,
    COUNT(DISTINCT target_user_id) as unique_targets,
    COUNT(DISTINCT action) as unique_actions,
    AVG(response_time_ms) as avg_response_time,
    MAX(timestamp) as last_activity
FROM admin_audit_logs 
GROUP BY admin_user_id, admin_email
ORDER BY total_actions DESC
`

type GetAuditLogStatsByAdminRow struct {
	AdminUserID     string
	AdminEmail      string
	TotalActions    int64
	UniqueTargets   int64
	UniqueActions   int64
	AvgResponseTime sql.NullFloat64
	LastActivity    interface{}
}

func (q *Queries) GetAuditLogStatsByAdmin(ctx context.Context) ([]GetAuditLogStatsByAdminRow, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogStatsByAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAuditLogStatsByAdminRow
	for rows.Next() {
		var i GetAuditLogStatsByAdminRow
		if err := rows.Scan(
			&i.AdminUserID,
			&i.AdminEmail,
			&i.TotalActions,
			&i.UniqueTargets,
			&i.UniqueActions,
			&i.AvgResponseTime,
			&i.LastActivity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogStatsByResource = `-- name: GetAuditLogStatsByResource :many
SELECT 
    resource,
    COUNT(*) as total_actions,
    COUNT(DISTINCT admin_user_id) as unique_admins,
    AVG(response_time_ms) as avg_response_time,
    SUM(CASE WHEN status_code >= 400 THEN 1 ELSE 0 END) as error_count
FROM admin_audit_logs 
GROUP BY resource
ORDER BY total_actions DESC
`

type GetAuditLogStatsByResourceRow struct {
	Resource        string
	TotalActions    int64
	UniqueAdmins    int64
	AvgResponseTime sql.NullFloat64
	ErrorCount      sql.NullFloat64
}

func (q *Queries) GetAuditLogStatsByResource(ctx context.Context) ([]GetAuditLogStatsByResourceRow, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogStatsByResource)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAuditLogStatsByResourceRow
	for rows.Next() {
		var i GetAuditLogStatsByResourceRow
		if err := rows.Scan(
			&i.Resource,
			&i.TotalActions,
			&i.UniqueAdmins,
			&i.AvgResponseTime,
			&i.ErrorCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByAction = `-- name: GetAuditLogsByAction :many
SELECT id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id FROM admin_audit_logs 
WHERE action = ?
ORDER BY timestamp DESC
LIMIT ?
`

type GetAuditLogsByActionParams struct {
	Action string
	Limit  int64
}

func (q *Queries) GetAuditLogsByAction(ctx context.Context, arg GetAuditLogsByActionParams) ([]AdminAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogsByAction, arg.Action, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminAuditLog
	for rows.Next() {
		var i AdminAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.AdminUserID,
			&i.AdminEmail,
			&i.TargetUserID,
			&i.Action,
			&i.Resource,
			&i.Method,
			&i.Path,
			&i.QueryParams,
			&i.RequestBody,
			&i.IpAddress,
			&i.UserAgent,
			&i.StatusCode,
			&i.ResponseTimeMs,
			&i.Timestamp,
			&i.RequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByAdminAndDateRange = `-- name: GetAuditLogsByAdminAndDateRange :many
SELECT id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id FROM admin_audit_logs 
WHERE admin_user_id = ? 
  AND timestamp BETWEEN ? AND ?
ORDER BY timestamp DESC
LIMIT ?
`

type GetAuditLogsByAdminAndDateRangeParams struct {
	AdminUserID string
	Limit       int64
}

func (q *Queries) GetAuditLogsByAdminAndDateRange(ctx context.Context, arg GetAuditLogsByAdminAndDateRangeParams) ([]AdminAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogsByAdminAndDateRange, arg.AdminUserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminAuditLog
	for rows.Next() {
		var i AdminAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.AdminUserID,
			&i.AdminEmail,
			&i.TargetUserID,
			&i.Action,
			&i.Resource,
			&i.Method,
			&i.Path,
			&i.QueryParams,
			&i.RequestBody,
			&i.IpAddress,
			&i.UserAgent,
			&i.StatusCode,
			&i.ResponseTimeMs,
			&i.Timestamp,
			&i.RequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByAdminUser = `-- name: GetAuditLogsByAdminUser :many
SELECT id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id FROM admin_audit_logs 
WHERE admin_user_id = ?
ORDER BY timestamp DESC
LIMIT ?
`

type GetAuditLogsByAdminUserParams struct {
	AdminUserID string
	Limit       int64
}

func (q *Queries) GetAuditLogsByAdminUser(ctx context.Context, arg GetAuditLogsByAdminUserParams) ([]AdminAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogsByAdminUser, arg.AdminUserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminAuditLog
	for rows.Next() {
		var i AdminAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.AdminUserID,
			&i.AdminEmail,
			&i.TargetUserID,
			&i.Action,
			&i.Resource,
			&i.Method,
			&i.Path,
			&i.QueryParams,
			&i.RequestBody,
			&i.IpAddress,
			&i.UserAgent,
			&i.StatusCode,
			&i.ResponseTimeMs,
			&i.Timestamp,
			&i.RequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByDateRange = `-- name: GetAuditLogsByDateRange :many
SELECT id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id FROM admin_audit_logs 
WHERE timestamp BETWEEN ? AND ?
ORDER BY timestamp DESC
LIMIT ?
`

type GetAuditLogsByDateRangeParams struct {
	FromTimestamp interface{}
	ToTimestamp   interface{}
	Limit         int64
}

func (q *Queries) GetAuditLogsByDateRange(ctx context.Context, arg GetAuditLogsByDateRangeParams) ([]AdminAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogsByDateRange, arg.FromTimestamp, arg.ToTimestamp, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminAuditLog
	for rows.Next() {
		var i AdminAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.AdminUserID,
			&i.AdminEmail,
			&i.TargetUserID,
			&i.Action,
			&i.Resource,
			&i.Method,
			&i.Path,
			&i.QueryParams,
			&i.RequestBody,
			&i.IpAddress,
			&i.UserAgent,
			&i.StatusCode,
			&i.ResponseTimeMs,
			&i.Timestamp,
			&i.RequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByIPAddress = `-- name: GetAuditLogsByIPAddress :many
SELECT id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id FROM admin_audit_logs 
WHERE ip_address = ?
ORDER BY timestamp DESC
LIMIT ?
`

type GetAuditLogsByIPAddressParams struct {
	IpAddress string
	Limit     int64
}

func (q *Queries) GetAuditLogsByIPAddress(ctx context.Context, arg GetAuditLogsByIPAddressParams) ([]AdminAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogsByIPAddress, arg.IpAddress, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminAuditLog
	for rows.Next() {
		var i AdminAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.AdminUserID,
			&i.AdminEmail,
			&i.TargetUserID,
			&i.Action,
			&i.Resource,
			&i.Method,
			&i.Path,
			&i.QueryParams,
			&i.RequestBody,
			&i.IpAddress,
			&i.UserAgent,
			&i.StatusCode,
			&i.ResponseTimeMs,
			&i.Timestamp,
			&i.RequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByMultipleCriteria = `-- name: GetAuditLogsByMultipleCriteria :many
SELECT id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id FROM admin_audit_logs 
WHERE 
    (? = '' OR admin_user_id = ?) AND
    (? = '' OR target_user_id = ?) AND
    (? = '' OR action = ?) AND
    (? = '' OR resource = ?) AND
    (? = 0 OR status_code = ?) AND
    timestamp BETWEEN ? AND ?
ORDER BY timestamp DESC
LIMIT ?
`

type GetAuditLogsByMultipleCriteriaParams struct {
	Column1      interface{}
	AdminUserID  string
	Column3      interface{}
	TargetUserID string
	Column5      interface{}
	Action       string
	Column7      interface{}
	Resource     string
	Column9      interface{}
	StatusCode   int64
	Limit        int64
}

func (q *Queries) GetAuditLogsByMultipleCriteria(ctx context.Context, arg GetAuditLogsByMultipleCriteriaParams) ([]AdminAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogsByMultipleCriteria,
		arg.Column1,
		arg.AdminUserID,
		arg.Column3,
		arg.TargetUserID,
		arg.Column5,
		arg.Action,
		arg.Column7,
		arg.Resource,
		arg.Column9,
		arg.StatusCode,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminAuditLog
	for rows.Next() {
		var i AdminAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.AdminUserID,
			&i.AdminEmail,
			&i.TargetUserID,
			&i.Action,
			&i.Resource,
			&i.Method,
			&i.Path,
			&i.QueryParams,
			&i.RequestBody,
			&i.IpAddress,
			&i.UserAgent,
			&i.StatusCode,
			&i.ResponseTimeMs,
			&i.Timestamp,
			&i.RequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByRequestID = `-- name: GetAuditLogsByRequestID :one
SELECT id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id FROM admin_audit_logs 
WHERE request_id = ?
`

func (q *Queries) GetAuditLogsByRequestID(ctx context.Context, requestID string) (AdminAuditLog, error) {
	row := q.db.QueryRowContext(ctx, getAuditLogsByRequestID, requestID)
	var i AdminAuditLog
	err := row.Scan(
		&i.ID,
		&i.AdminUserID,
		&i.AdminEmail,
		&i.TargetUserID,
		&i.Action,
		&i.Resource,
		&i.Method,
		&i.Path,
		&i.QueryParams,
		&i.RequestBody,
		&i.IpAddress,
		&i.UserAgent,
		&i.StatusCode,
		&i.ResponseTimeMs,
		&i.Timestamp,
		&i.RequestID,
	)
	return i, err
}

const getAuditLogsByResource = `-- name: GetAuditLogsByResource :many
SELECT id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id FROM admin_audit_logs 
WHERE resource = ?
ORDER BY timestamp DESC
LIMIT ?
`

type GetAuditLogsByResourceParams struct {
	Resource string
	Limit    int64
}

func (q *Queries) GetAuditLogsByResource(ctx context.Context, arg GetAuditLogsByResourceParams) ([]AdminAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogsByResource, arg.Resource, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminAuditLog
	for rows.Next() {
		var i AdminAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.AdminUserID,
			&i.AdminEmail,
			&i.TargetUserID,
			&i.Action,
			&i.Resource,
			&i.Method,
			&i.Path,
			&i.QueryParams,
			&i.RequestBody,
			&i.IpAddress,
			&i.UserAgent,
			&i.StatusCode,
			&i.ResponseTimeMs,
			&i.Timestamp,
			&i.RequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByTargetUser = `-- name: GetAuditLogsByTargetUser :many
SELECT id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id FROM admin_audit_logs 
WHERE target_user_id = ?
ORDER BY timestamp DESC
LIMIT ?
`

type GetAuditLogsByTargetUserParams struct {
	TargetUserID string
	Limit        int64
}

func (q *Queries) GetAuditLogsByTargetUser(ctx context.Context, arg GetAuditLogsByTargetUserParams) ([]AdminAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogsByTargetUser, arg.TargetUserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminAuditLog
	for rows.Next() {
		var i AdminAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.AdminUserID,
			&i.AdminEmail,
			&i.TargetUserID,
			&i.Action,
			&i.Resource,
			&i.Method,
			&i.Path,
			&i.QueryParams,
			&i.RequestBody,
			&i.IpAddress,
			&i.UserAgent,
			&i.StatusCode,
			&i.ResponseTimeMs,
			&i.Timestamp,
			&i.RequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByTargetUserAndAction = `-- name: GetAuditLogsByTargetUserAndAction :many
SELECT id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id FROM admin_audit_logs 
WHERE target_user_id = ? 
  AND action = ?
ORDER BY timestamp DESC
LIMIT ?
`

type GetAuditLogsByTargetUserAndActionParams struct {
	TargetUserID string
	Action       string
	Limit        int64
}

func (q *Queries) GetAuditLogsByTargetUserAndAction(ctx context.Context, arg GetAuditLogsByTargetUserAndActionParams) ([]AdminAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogsByTargetUserAndAction, arg.TargetUserID, arg.Action, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminAuditLog
	for rows.Next() {
		var i AdminAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.AdminUserID,
			&i.AdminEmail,
			&i.TargetUserID,
			&i.Action,
			&i.Resource,
			&i.Method,
			&i.Path,
			&i.QueryParams,
			&i.RequestBody,
			&i.IpAddress,
			&i.UserAgent,
			&i.StatusCode,
			&i.ResponseTimeMs,
			&i.Timestamp,
			&i.RequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsWithPagination = `-- name: GetAuditLogsWithPagination :many
SELECT id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id FROM admin_audit_logs 
ORDER BY timestamp DESC
LIMIT ? OFFSET ?
`

type GetAuditLogsWithPaginationParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) GetAuditLogsWithPagination(ctx context.Context, arg GetAuditLogsWithPaginationParams) ([]AdminAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogsWithPagination, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminAuditLog
	for rows.Next() {
		var i AdminAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.AdminUserID,
			&i.AdminEmail,
			&i.TargetUserID,
			&i.Action,
			&i.Resource,
			&i.Method,
			&i.Path,
			&i.QueryParams,
			&i.RequestBody,
			&i.IpAddress,
			&i.UserAgent,
			&i.StatusCode,
			&i.ResponseTimeMs,
			&i.Timestamp,
			&i.RequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDataAccessAuditLogs = `-- name: GetDataAccessAuditLogs :many
SELECT id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id FROM admin_audit_logs 
WHERE action = 'VIEW' 
  AND resource IN ('users', 'orders', 'payments', 'personal_data')
  AND timestamp BETWEEN ? AND ?
ORDER BY timestamp DESC
LIMIT ?
`

// Specifically for sensitive data access (VIEW actions)
func (q *Queries) GetDataAccessAuditLogs(ctx context.Context, limit int64) ([]AdminAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getDataAccessAuditLogs, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminAuditLog
	for rows.Next() {
		var i AdminAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.AdminUserID,
			&i.AdminEmail,
			&i.TargetUserID,
			&i.Action,
			&i.Resource,
			&i.Method,
			&i.Path,
			&i.QueryParams,
			&i.RequestBody,
			&i.IpAddress,
			&i.UserAgent,
			&i.StatusCode,
			&i.ResponseTimeMs,
			&i.Timestamp,
			&i.RequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFailedAuditLogs = `-- name: GetFailedAuditLogs :many
SELECT id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id FROM admin_audit_logs 
WHERE status_code >= 400
ORDER BY timestamp DESC
LIMIT ?
`

func (q *Queries) GetFailedAuditLogs(ctx context.Context, limit int64) ([]AdminAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getFailedAuditLogs, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminAuditLog
	for rows.Next() {
		var i AdminAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.AdminUserID,
			&i.AdminEmail,
			&i.TargetUserID,
			&i.Action,
			&i.Resource,
			&i.Method,
			&i.Path,
			&i.QueryParams,
			&i.RequestBody,
			&i.IpAddress,
			&i.UserAgent,
			&i.StatusCode,
			&i.ResponseTimeMs,
			&i.Timestamp,
			&i.RequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentAuditLogs = `-- name: GetRecentAuditLogs :many
SELECT id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id FROM admin_audit_logs 
ORDER BY timestamp DESC
LIMIT ?
`

func (q *Queries) GetRecentAuditLogs(ctx context.Context, limit int64) ([]AdminAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getRecentAuditLogs, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminAuditLog
	for rows.Next() {
		var i AdminAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.AdminUserID,
			&i.AdminEmail,
			&i.TargetUserID,
			&i.Action,
			&i.Resource,
			&i.Method,
			&i.Path,
			&i.QueryParams,
			&i.RequestBody,
			&i.IpAddress,
			&i.UserAgent,
			&i.StatusCode,
			&i.ResponseTimeMs,
			&i.Timestamp,
			&i.RequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSlowAuditLogs = `-- name: GetSlowAuditLogs :many
SELECT id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id FROM admin_audit_logs 
WHERE response_time_ms > ?
ORDER BY response_time_ms DESC
LIMIT ?
`

type GetSlowAuditLogsParams struct {
	ResponseTimeMs int64
	Limit          int64
}

func (q *Queries) GetSlowAuditLogs(ctx context.Context, arg GetSlowAuditLogsParams) ([]AdminAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getSlowAuditLogs, arg.ResponseTimeMs, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminAuditLog
	for rows.Next() {
		var i AdminAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.AdminUserID,
			&i.AdminEmail,
			&i.TargetUserID,
			&i.Action,
			&i.Resource,
			&i.Method,
			&i.Path,
			&i.QueryParams,
			&i.RequestBody,
			&i.IpAddress,
			&i.UserAgent,
			&i.StatusCode,
			&i.ResponseTimeMs,
			&i.Timestamp,
			&i.RequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSuspiciousAuditLogs = `-- name: GetSuspiciousAuditLogs :many
SELECT a.id, a.admin_user_id, a.admin_email, a.target_user_id, a."action", a.resource, a.method, a.path, a.query_params, a.request_body, a.ip_address, a.user_agent, a.status_code, a.response_time_ms, a.timestamp, a.request_id FROM admin_audit_logs a
WHERE (a.admin_user_id, a.ip_address) IN (
    SELECT b.admin_user_id, b.ip_address 
    FROM admin_audit_logs b
    WHERE b.status_code >= 400 
      AND b.timestamp >= ?
    GROUP BY b.admin_user_id, b.ip_address 
    HAVING COUNT(*) >= ?
)
ORDER BY a.timestamp DESC
`

type GetSuspiciousAuditLogsParams struct {
	Timestamp interface{}
	Column2   interface{}
}

// Logs with multiple failed attempts from same admin/IP
func (q *Queries) GetSuspiciousAuditLogs(ctx context.Context, arg GetSuspiciousAuditLogsParams) ([]AdminAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getSuspiciousAuditLogs, arg.Timestamp, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminAuditLog
	for rows.Next() {
		var i AdminAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.AdminUserID,
			&i.AdminEmail,
			&i.TargetUserID,
			&i.Action,
			&i.Resource,
			&i.Method,
			&i.Path,
			&i.QueryParams,
			&i.RequestBody,
			&i.IpAddress,
			&i.UserAgent,
			&i.StatusCode,
			&i.ResponseTimeMs,
			&i.Timestamp,
			&i.RequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchAuditLogs = `-- name: SearchAuditLogs :many
SELECT id, admin_user_id, admin_email, target_user_id, "action", resource, method, path, query_params, request_body, ip_address, user_agent, status_code, response_time_ms, timestamp, request_id FROM admin_audit_logs 
WHERE (
    admin_email LIKE '%' || ? || '%' OR
    target_user_id LIKE '%' || ? || '%' OR
    action LIKE '%' || ? || '%' OR
    resource LIKE '%' || ? || '%' OR
    path LIKE '%' || ? || '%'
)
ORDER BY timestamp DESC
LIMIT ?
`

type SearchAuditLogsParams struct {
	Column1 sql.NullString
	Column2 sql.NullString
	Column3 sql.NullString
	Column4 sql.NullString
	Column5 sql.NullString
	Limit   int64
}

func (q *Queries) SearchAuditLogs(ctx context.Context, arg SearchAuditLogsParams) ([]AdminAuditLog, error) {
	rows, err := q.db.QueryContext(ctx, searchAuditLogs,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminAuditLog
	for rows.Next() {
		var i AdminAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.AdminUserID,
			&i.AdminEmail,
			&i.TargetUserID,
			&i.Action,
			&i.Resource,
			&i.Method,
			&i.Path,
			&i.QueryParams,
			&i.RequestBody,
			&i.IpAddress,
			&i.UserAgent,
			&i.StatusCode,
			&i.ResponseTimeMs,
			&i.Timestamp,
			&i.RequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
